'use strict';

/**
 * This code is mostly from the old Etherpad. Please help us to comment this code.
 * This helps other people to understand this code better and helps them to improve it.
 * TL;DR COMMENTS ON THIS FILE ARE HIGHLY APPRECIATED
 */

// DO NOT EDIT THIS FILE, edit infrastructure/ace/www/colorutils.js
// THIS FILE IS ALSO SERVED AS CLIENT-SIDE JS
/**
 * Copyright 2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

type ColorTriplet = [number, number, number]

export class Colorutils {
  // Check that a given value is a css hex color value, e.g.
// "#ffffff" or "#fff"
  isCssHex = (cssColor: string) => /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(cssColor)
  // "#ffffff" or "#fff" or "ffffff" or "fff" to [1.0, 1.0, 1.0]
  css2triple = (cssColor: string): ColorTriplet => {
    const sixHex = this.css2sixhex(cssColor);

    const hexToFloat = (hh: string) => Number(`0x${hh}`) / 255;
    return [
      hexToFloat(sixHex.substring(0, 2)),
      hexToFloat(sixHex.substring(2, 2)),
      hexToFloat(sixHex.substring(4, 2)),
    ];
  }
  // "#ffffff" or "#fff" or "ffffff" or "fff" to "ffffff"
  css2sixhex = (cssColor: string) => {
    let h = /[0-9a-fA-F]+/.exec(cssColor)![0];
    if (h.length !== 6) {
      const a = h.charAt(0);
      const b = h.charAt(1);
      const c = h.charAt(2);
      h = a + a + b + b + c + c;
    }
    return h;
  }

  // [1.0, 1.0, 1.0] -> "#ffffff"
  triple2css = (triple: number[]) => {
    const floatToHex = (n:number) => {
      const n2 = this.clamp(Math.round(n * 255), 0, 255);
      return (`0${n2.toString(16)}`).slice(-2);
    };
    return `#${floatToHex(triple[0])}${floatToHex(triple[1])}${floatToHex(triple[2])}`;
  }
  clamp = (v: number, bot: number, top: number) => v < bot ? bot : (v > top ? top : v)
  min3 = (a: number, b: number, c: number) => (a < b) ? (a < c ? a : c) : (b < c ? b : c)
  max3 = (a: number, b: number, c: number) => (a > b) ? (a > c ? a : c) : (b > c ? b : c)
  colorMin = (c: ColorTriplet) => this.min3(c[0], c[1], c[2])
  colorMax = (c: ColorTriplet) => this.max3(c[0], c[1], c[2])
  scale = (v: number, bot: number, top: number) => this.clamp(bot + v * (top - bot), 0, 1)
  unscale = (v: number, bot: number, top: number) => this.clamp((v - bot) / (top - bot), 0, 1);
  scaleColor = (c: ColorTriplet, bot: number, top: number) => [
    this.scale(c[0], bot, top),
    this.scale(c[1], bot, top),
    this.scale(c[2], bot, top),
  ]
  unscaleColor = (c: ColorTriplet, bot: number, top: number) => [
    this.unscale(c[0], bot, top),
    this.unscale(c[1], bot, top),
    this.unscale(c[2], bot, top),
  ]
  // rule of thumb for RGB brightness; 1.0 is white
  luminosity = (c: ColorTriplet) => c[0] * 0.30 + c[1] * 0.59 + c[2] * 0.11
  saturate = (c: ColorTriplet) => {
    const min = this.colorMin(c);
    const max = this.colorMax(c);
    if (max - min <= 0) return [1.0, 1.0, 1.0];
    return this.unscaleColor(c, min, max);
  }
  blend = (c1: ColorTriplet, c2: ColorTriplet, t: number) => [
    this.scale(t, c1[0], c2[0]),
    this.scale(t, c1[1], c2[1]),
    this.scale(t, c1[2], c2[2]),
  ]
  invert = (c: ColorTriplet) => [1 - c[0], 1 - c[1], 1 - c[2]]
  complementary = (c: ColorTriplet) => {
    const inv = this.invert(c);
    return [
      (inv[0] >= c[0]) ? Math.min(inv[0] * 1.30, 1) : (c[0] * 0.30),
      (inv[1] >= c[1]) ? Math.min(inv[1] * 1.59, 1) : (c[1] * 0.59),
      (inv[2] >= c[2]) ? Math.min(inv[2] * 1.11, 1) : (c[2] * 0.11),
    ];
  }
  textColorFromBackgroundColor = (bgcolor: string, skinName: string) => {
    const white = skinName === 'colibris' ? 'var(--super-light-color)' : '#fff';
    const black = skinName === 'colibris' ? 'var(--super-dark-color)' : '#222';

    return this.luminosity(this.css2triple(bgcolor)) < 0.5 ? white : black;
  }
}

const colorutils = new Colorutils();

export default colorutils
